type Interval {
  start: String! # timespan
  end: String! # timespan
}

type Histogram {
  values: [Int!]!
  intervals: [Interval!]!
  underflow: Int!
  overflow: Int!
}

type RpcPair {
  dispatch: Histogram
  impl: Histogram
}

type RpcTimings {
  getStagedLedgerAux: RpcPair!
  answerSyncLedgerQuery: RpcPair!
  getAncestry: RpcPair!
  transitionCatchup: RpcPair!
}

type Histograms {
  rpcTimings: RpcTimings!
  externalTransitionLatency: Histogram
  acceptedTransitionLocalLatency: Histogram
  acceptedTransitionRemoteLatency: Histogram
  snarkWorkerTransitionTime: Histogram
  snarkWorkerMergeTime: Histogram
}

type ConsensusConfiguration {
  delta: Int!
  k: Int!
  c: Int!
  cTimesK: Int!
  slotsPerEpoch: Int!
  slotDuration: Int!
  epochDuration: Int!
  acceptableNetworkDelay: Int!
}

type DaemonStatus {
  numAccounts: Int
  blockCount: Int
  uptimeSecs: Int!
  ledgerMerkleRoot: String
  stagedLedgerHash: String
  stateHash: String
  commitId: String! # git sha
  confDir: String!
  peers: [String!]!
  userCommandsSent: Int!
  runSnarkWorker: Boolean!
  syncStatus: SyncStatus!
  proposePubkeys: [String!]! @examples(values: [["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"]])
  histograms: Histograms
  consensusTimeBestTip: String
  consensusTimeNow: String!
  consensusMechanism: String!
  consensusConfiguration: ConsensusConfiguration!
}

enum SyncStatus {
  OFFLINE
  BOOTSTRAP # Resyncing
  SYNCED
}

enum ChainReorganizationStatus {
  CHANGED
}

type SnarkWorker {
  key: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  fee: String! @fake(type: number)
}

type UserCommand {
  id: String!
  isDelegation: Boolean!
  nonce: Int!
  from: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"]) 
  to: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  amount: String! @fake(type: number)
  fee: String! @fake(type: number)
  memo: String! @fake(type:hackerPhrase)
}

type FeeTransfer {
  recipient: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  fee: String! @fake(type: number)
}

type BlockchainState {
  date: String! @fake(type: pastDate)
  snarkedLedgerHash: String!
  stagedLedgerHash: String!
}

type ProtocolState {
  previousStateHash: String!
  blockchainState: BlockchainState!
}

type Transactions {
  userCommands: [UserCommand!]!
  feeTransfer: [FeeTransfer!]!
  coinbase: String! @fake(type: number)
}

type Block {
  creator: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  stateHash: String!
  protocolState: ProtocolState!
  transactions: Transactions!
}

type BlockConfirmation {
  stateHash: String!
  numConfirmations: Int!
}

type AnnotatedBalance {
  total: String! @fake(type: number)
  unknown: String! @fake(type: number)
}

type Wallet {
  publicKey: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
  nonce: String!
  receiptChainHash: String!
  delegate: String!
  votingFor: String!
  balance: AnnotatedBalance!
  stakingActive: Boolean! # Actively staking. There is a lag between switching staking keys and them appearing here as you may be in the middle of a staking procedure with other keys.
  privateKeyPath: String! @examples(values: ["/Users/o1labs/.coda_config/wallets/store/ASgu5t5hlbjC3DZYZ87tASbUX+mGXJUpp+uekWKwtxlJbHxGuedIAQAAAQ=="])
}

type NodeStatus {
  network: String @examples(values: ["testnet"])
}

## Input types

input AddWalletInput {
  publicKey: String
  privateKey: String
}

input DeleteWalletInput {
  publicKey: String!
}

input AddPaymentReceiptInput {
  receipt: String
}

input SetNetworkInput {
  address: String
}

input SetSnarkWorkerInput {
  worker: String!
  fee: String!
}

input CreatePaymentInput {
  from: String!,
  to: String!,
  amount: String!,
  fee: String!,
  memo: String
}

input CreateDelegationInput {
  from: String!,
  to: String,
  fee: String!,
  memo: String
}

input UserCommandFilterInput {
  from: String,
}

input BlockFilterInput {
  relatedTo: String!,
}

input SetStakingInput {
  # Set to empty to stop staking
  # Set to a non-empty list of public keys to start staking on these keys
  wallets: [String!]!
}

## Payload types

type CreatePaymentPayload {
  payment: UserCommand
}

type CreateDelegationPayload {
  delegation: UserCommand
}

type SetSnarkWorkerPayload {
  worker: SnarkWorker
}

type SetNetworkPayload {
  address: String
}

type AddPaymentReceiptPayload {
  payment: UserCommand
}

type AddWalletPayload {
  publicKey: String! @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
}

type DeleteWalletPayload {
  publicKey: String @examples(values: ["PUB_KEY_E9873DF4453213303DA61F2", "PUB_KEY_F1173DF4453213303DA61F2"])
}

type SetStakingPayload {
  # Returns the last wallet public keys that were staking before
  # or empty if there were none
  lastStaking: [String!]!
}

# Pagination types

type PageInfo {
  hasPreviousPage: Boolean! @examples(values: [false])
  hasNextPage: Boolean! @examples(values: [false])
  firstCursor: String
  lastCursor: String
}

type UserCommandEdge {
  cursor: String!
  node: UserCommand!
}

type UserCommandConnection {
  edges: [UserCommandEdge!]!
  nodes: [UserCommand!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BlockEdge {
  cursor: String!
  node: Block!
}

type BlockConnection {
  edges: [BlockEdge!]!
  nodes: [Block!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  # List of wallets currently tracked by the node
  ownedWallets: [Wallet!]!
  
  wallet(publicKey: String!): Wallet
  
  pooledUserCommands(publicKey: String!): [UserCommand!]!
  
  blocks(
    filter: BlockFilterInput!,
    first: Int,
    after: String,
    last: Int,
    before: String): BlockConnection!
  
  # Null if node isn't performing snark work
  currentSnarkWorker: SnarkWorker

  # Current sync status of the node
  syncStatus: SyncStatus!

  # Current daemon status of the node
  daemonStatus: DaemonStatus!
  
  # version of the node (commit hash or version #)
  version: String @examples(values: ["aa8c3f93ec2bad4718c308914df9e47b586f8ecd"])
  
  # Network that the node is connected to
  network: String @examples(values: ["testnet"])
  status: NodeStatus

  initialPeers: [String!]! @examples(values: ["testnet"])
}

type Mutation {
  sendPayment(input: CreatePaymentInput!): CreatePaymentPayload

  createDelegation(input: CreateDelegationInput!): CreateDelegationPayload
  
  setSnarkWorker(input: SetSnarkWorkerInput!): SetSnarkWorkerPayload
  
  # Configure which network your node is connected to
  setNetwork(input: SetNetworkInput!): SetNetworkPayload
  
  # Adds transaction to the node
  addPaymentReceipt(input: AddPaymentReceiptInput!): AddPaymentReceiptPayload
  
  # Tell server to track a private key and all associated transactions
  addWallet(input: AddWalletInput!): AddWalletPayload!
  
  # Deletes private key associated with `key` and all related information
  deleteWallet(input: DeleteWalletInput!): DeleteWalletPayload

  setStaking(input: SetStakingInput!): SetStakingPayload!
}

type Subscription {
  # Subscribe to sync status of the node
  newSyncUpdate: SyncStatus!
  
  blockConfirmation: BlockConfirmation!
  
  # Subscribe to all blocks related to `key`
  newBlock(key: String): Block!
  
  # Triggered whenever the best tip changes
  # to another branch in the transition frontier
  chainReorganization: ChainReorganizationStatus!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
