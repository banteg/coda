# WARNING: config.yml file is generated from config.yml.jinja
---
version: 3
jobs:
    tracetool:
        docker:
            - image: codaprotocol/coda:toolchain-rust-8959b8dfda29263d2f88f13a284ef34c9da0a081
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Build trace-tool
                  command: cd src/app/trace-tool && cargo build --frozen

    build-wallet:
        macos:
            xcode: "10.2.0"
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run: cd frontend/wallet && yarn
            - run:
                  name: Lint wallet
                  command: cd frontend/wallet && yarn run reformat && git diff --exit-code src
            - run:
                  name: Build wallet
                  command: cd frontend/wallet && yarn run build-ci
            - run:
                  name: Test wallet
                  command: cd frontend/wallet && yarn test
            - run:
                  name: Build dist wallet
                  command: cd frontend/wallet && yarn run dist
            - run:
                  name: Publish dist wallet
                  command: (env HOMEBREW_NO_AUTO_UPDATE=1 brew install awscli) && ./scripts/publish-wallet.sh
            - run: cd frontend/website && yarn install
            - run:
                  name: Decrypt PragmataPro font
                  command: cd frontend/website && yarn run decrypt-ci
            - run:
                  name: Lint website
                  command: cd frontend/website && yarn run reformat && git diff --exit-code src
            - run:
                  name: Build website
                  command: cd frontend/website && (env HOMEBREW_NO_AUTO_UPDATE=1 brew install pandoc) && yarn run build
            - run:
                  name: Deploy staging
                  command: cd frontend/website && (if [ "$CIRCLE_BRANCH" == "master" ]; then yarn run deploy-ci; fi)

    lint:
        docker:
            - image: codaprotocol/coda:toolchain-51191cf583a5129255d2c53ad946f6821ad9989c
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Check circle CI configuration rendering
                  command: ./scripts/test.py render --check .circleci/config.yml.jinja .mergify.yml.jinja
            - run:
                  name: OCamlformat (make check-format)
                  command: eval `opam config env` && make check-format
            - run:
                  name: Snarky tracks master (make check-snarky-submodule)
                  command: make check-snarky-submodule
            - run:
                  name: Check CODEOWNERS file format
                  command: ./scripts/lint_codeowners.sh

    update-branch-protection:
        docker:
            - image: python:3
        steps:
            - run:
                name: Install dependencies
                command: pip install --user requests jinja2
            - checkout
            - run:
                  name: Update branch protection rule from test configuration
                  command: ./scripts/test.py required-status >required_status && cat required_status && ./scripts/update_branch_rule.py required_status

    build-macos:
       macos:
           xcode: "10.1.0"
       working_directory: /Users/distiller/coda
       environment:
           HOMEBREW_LOGS: /Users/distiller/homebrew.log
           OPAMYES: 1
       steps:
           - run:
               name: Make /nix paths
               command: |
                   sudo mkdir /nix
                   sudo chown distiller /nix
           - checkout
           - restore_cache:
                 keys:
                     - homebrew-v1-{{'{{'}} checksum "scripts/macos-setup.sh" {{'}}'}}
                     - homebrew-v1-
           - restore_cache:
                 keys:
                     - opam-v3-{{'{{'}} checksum "src/opam.export" {{'}}'}}
                     - opam-v3-
           - run: git submodule sync && git submodule update --init --recursive
           - run:
                 name: Download Deps -- make macos-setup-download
                 command: ./scripts/skip_if_only_frontend.sh make macos-setup-download
           - run:
                 name: Compile Deps -- make macos-setup-compile
                 command: ./scripts/skip_if_only_frontend.sh make macos-setup-compile
           - save_cache:
                 key: homebrew-v1-{{'{{'}} checksum "scripts/macos-setup.sh" {{'}}'}}
                 paths:
                     - "/usr/local/Homebrew"
                     - "/Users/distiller/Library/Caches/Homebrew"
           - save_cache:
                 key: opam-v3-{{'{{'}} checksum "src/opam.export" {{'}}'}}
                 paths:
                     - "/Users/distiller/.opam"
           - run:
                 name: Build OCaml
                 command: ./scripts/skip_if_only_frontend.sh bash -c 'eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log'
           - run:
                 name: Record Constraint System Digests
                 command: ./scripts/skip_if_only_frontend.sh bash -c 'src/_build/default/app/cli/src/coda.exe client constraint-system-digests | tee /tmp/constraint-system-digests.log'
           - run:
                 name: Run all tests (on master)
                 command: echo "FIXME Tests not yet working on mac"
           - run: 
                 name: Create Portable Binary
                 command: ./scripts/skip_if_only_frontend.sh make macos-portable
           - run: 
                 name: Install JFrog CLI
                 command: ./scripts/skip_if_only_frontend.sh bash -c 'curl -fL https://getcli.jfrog.io | sh'
           - run: 
                 name: Configure JFrog CLI
                 command: ./scripts/skip_if_only_frontend.sh bash -c './jfrog rt config --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --apikey $ARTIFACTORY_API_KEY --interactive=false'
           - run: 
                 name: Release Build to Artifactory
                 command: ./scripts/skip_if_only_frontend.sh bash -c './jfrog rt u _build/coda-daemon-macos.zip macos-coda/coda-daemon-$CIRCLE_BUILD_NUM.zip --build-name=build-macos --build-number=$CIRCLE_BUILD_NUM'

    {%- for profile in build_artifact_profiles %}
    build-artifacts--{{profile}}:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-51191cf583a5129255d2c53ad946f6821ad9989c
        environment:
            DUNE_PROFILE: {{profile}}
        steps:
            - checkout
            - run: mkdir -p /tmp/artifacts
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Download Stable Proving Keys
                  command: ./scripts/skip_if_only_frontend.sh scripts/getkeys.sh
            - run:
                  name: Build OCaml
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'eval `opam config env` && make build 2>&1 | tee /tmp/artifacts/buildocaml.log'
            - run:
                  name: Build deb Package with keys
                  command: ./scripts/skip_if_only_frontend.sh make deb
            - run:
                  name: Store Generated Proving and Verifying Keys
                  command: ./scripts/skip_if_only_frontend.sh make provingkeys
            - run:
                  name: Store Genesis Public/Private Keypairs
                  command: ./scripts/skip_if_only_frontend.sh make genesiskeys
            - run:
                  name: Upload deb to repo
                  command: ./scripts/skip_if_only_frontend.sh make publish_deb
            - run:
                  name: Record Constraint System Digests
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'src/_build/default/app/cli/src/coda.exe client constraint-system-digests | tee /tmp/artifacts/constraint-system-digests.log'
            - store_artifacts:
                  path: /tmp/artifacts
            - run:
                  name: Copy artifacts to Google Cloud
                  command: ./scripts/skip_if_only_frontend.sh scripts/artifacts.sh
    {%- endfor %}

    {%- for profile in unit_test_profiles %}
    test-unit--{{profile}}:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-51191cf583a5129255d2c53ad946f6821ad9989c
        steps:
            - checkout
            - run: ulimit -c unlimited
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Run unit tests
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && dune build --profile={{profile}} -j8 && dune runtest --profile={{profile}} -j8'
            - store_artifacts:
                path: core*
    {%- endfor %}

    {%- for profile in test_permutations.keys() | sort %}
    test--{{profile}}:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-51191cf583a5129255d2c53ad946f6821ad9989c
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            {%- for test in test_permutations[profile] %}
            - run:
                  name: Running test -- {{profile}}:{{test}}
                  command: ./scripts/skip_if_only_frontend.sh bash -c 'source ~/.profile && ./scripts/test.py run "{{profile}}:{{test}}"'
            {%- endfor %}
            - store_artifacts:
                  path: test_logs
    {%- endfor %}

workflows:
    version: 2
    coda_parallel:
        jobs:
            - lint
            - update-branch-protection:
                filters:
                  branches:
                    only: master
            - tracetool
            - build-wallet
            - build-macos
            {%- for profile in build_artifact_profiles %}
            - build-artifacts--{{profile}}
            {%- endfor %}
            {%- for profile in unit_test_profiles %}
            - test-unit--{{profile}}
            {%- endfor %}
            {%- for profile in test_permutations.keys() | sort %}
            - test--{{profile}}
            {%- endfor %}
